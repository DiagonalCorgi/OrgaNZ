openapi: "3.0.1"
info:
  version: 1.0.0
  title: "Organz API"
  description: |
    An API used to access the Human Harvest Inc server.
    Versioning: Adding new endpoints, adding parameters or key value pairs are all minor changes, as they are still valid with a past client.
      Major changes include: Modifying the data types of any parameters or values, removing key value pairs, removing endpoints. These CANNOT be pushed without maintaining a legacy version and upgrading the system to a new version.

tags:
    - name: Client
      description: All base client paths
    - name: Client Donation Status
      description: All client donation status paths
    - name: Client Medications
      description: All client medication paths
    - name: Client Illnesses
      description: All client illness AKA medical history paths
    - name: Client Procedures
      description: All client procedure paths
    - name: Client Transplant Requests
      description: All client transplant request paths
    - name: Clinician
      description: All base clinician paths
    - name: Administrator
      description: All base administrator paths
  
paths:
  /clients:
    get:
      tags:
        - Client
      security:
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: "Returns all clients from the system"
      parameters:
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/minimumAge'
        - $ref: '#/components/parameters/maximumAge'
        - $ref: '#/components/parameters/region'
        - $ref: '#/components/parameters/birthGender'
        - $ref: '#/components/parameters/clientType'
        - $ref: '#/components/parameters/donating'
        - $ref: '#/components/parameters/requesting'
      responses:
        200:
          description: A list of clients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/clientOverview'
                
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        500:
          $ref: '#/components/responses/500InternalServerError'
    post:
      tags:
        - Client
      summary: Create a new client
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clientOverview'
        required: true
      parameters:
        - $ref: '#/components/parameters/view'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientOverview'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        500:
          $ref: '#/components/responses/500InternalServerError'
  '/clients/{uid}':
    parameters:
    - in: path
      name: uid
      description: Client User ID
      required: true
      schema:
        type: integer
        minimum: 0
    get:
      tags:
        - Client
      security:
        - ClientAccess: []
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Get detailed client information
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientDetails'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        500:
          $ref: '#/components/responses/500InternalServerError'
    patch:
      tags:
        - Client
      security:
        - ClientAccess: []
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Change some information about a client
      description: Only those properties included in the request body will be changed.
      parameters:
        - $ref: '#/components/parameters/etag'
        - $ref: '#/components/parameters/view'
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/clientModifiableDetails'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientDetails'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        412:
          $ref: '#/components/responses/412PreconditionFailed'
        428:
          $ref: '#/components/responses/428PreconditionRequired'
        500:
          $ref: '#/components/responses/500InternalServerError'
    delete:
      tags:
        - Client
      security:
        - ClientAccess: []
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Delete a client
      parameters:
        - $ref: '#/components/parameters/etag'
        - $ref: '#/components/parameters/view'
      responses:
        201:
          description: Deleted
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        412:
          $ref: '#/components/responses/412PreconditionFailed'
        428:
          $ref: '#/components/responses/428PreconditionRequired'
        500:
          $ref: '#/components/responses/500InternalServerError'
  '/clients/file':
    get:
      tags:
        - Client
      security:
        - AdministratorAccess: []
      summary: Get a file of all clients
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: string
                format: binary
                example: Raw content of JSON clients file
            text/csv:
              schema:
                type: string
                format: binary
                example: Raw content of CSV clients file
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        500:
          $ref: '#/components/responses/500InternalServerError'
    post:
      tags:
        - Client
      security:
        - AdministratorAccess: []
      summary: Load a file of clients
      requestBody:
        content:
          application/json:
            schema:
              type: string
              format: binary
              example: Raw content of JSON clients file
          text/csv:
            schema:
              type: string
              format: binary
              example: Raw content of CSV clients file
        description: 'Clients file in either JSON or CSV file format.'
        required: true
      responses:
        201:
          description: File loaded successfully
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        500:
          $ref: '#/components/responses/500InternalServerError'

  '/clients/{uid}/donationStatus':
    parameters:
    - in: path
      name: uid
      description: Client User ID
      required: true
      schema:
        type: integer
        minimum: 0
    get:
      tags:
        - Client Donation Status
      security:
        - ClientAccess: []
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Get the list of a given clients donation status
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/organBooleanArray'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        500:
          $ref: '#/components/responses/500InternalServerError'
    patch:
      tags:
        - Client Donation Status
      security:
        - ClientAccess: []
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Change a clients organ donation status
      description: Only those organs included in the request body will be changed.
      parameters:
        - $ref: '#/components/parameters/etag'
        - $ref: '#/components/parameters/view'
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/organBooleanArray'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/organBooleanArray'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        412:
          $ref: '#/components/responses/412PreconditionFailed'
        428:
          $ref: '#/components/responses/428PreconditionRequired'
        500:
          $ref: '#/components/responses/500InternalServerError'

  '/clients/{uid}/medications':
    parameters:
    - in: path
      name: uid
      description: Client User ID
      required: true
      schema:
        type: integer
        minimum: 0
    get:
      tags:
        - Client Medications
      security:
        - ClientAccess: []
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Get the list of a given clients medications
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/medicationRecord'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        500:
          $ref: '#/components/responses/500InternalServerError'
    post:
      tags:
        - Client Medications
      security:
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Create a new medication record
      description: Returns the full list of medication records in response upon success.
      parameters:
        - $ref: '#/components/parameters/etag'
        - $ref: '#/components/parameters/view'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/medicationRecordCreate'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/medicationRecord'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        412:
          $ref: '#/components/responses/412PreconditionFailed'
        428:
          $ref: '#/components/responses/428PreconditionRequired'
        500:
          $ref: '#/components/responses/500InternalServerError'

  '/clients/{uid}/medications/{id}':
    parameters:
    - in: path
      name: uid
      description: Client User ID
      required: true
      schema:
        type: integer
        minimum: 0
    - in: path
      name: id
      description: Medication record ID
      required: true
      schema:
        type: integer
    delete:
      tags:
        - Client Medications
      security:
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Delete a medication record
      parameters:
        - $ref: '#/components/parameters/etag'
        - $ref: '#/components/parameters/view'
      responses:
        201:
          description: Deleted
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        412:
          $ref: '#/components/responses/412PreconditionFailed'
        428:
          $ref: '#/components/responses/428PreconditionRequired'
        500:
          $ref: '#/components/responses/500InternalServerError'

  '/clients/{uid}/medications/{id}/start':
    parameters:
    - in: path
      name: uid
      description: Client User ID
      required: true
      schema:
        type: integer
        minimum: 0
    - in: path
      name: id
      description: Medication record ID
      required: true
      schema:
        type: integer
    post:
      tags:
        - Client Medications
      security:
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Move a medication to current medications
      description: Returns the medication record in response upon success.
      parameters:
        - $ref: '#/components/parameters/etag'
        - $ref: '#/components/parameters/view'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/medicationRecord'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        412:
          $ref: '#/components/responses/412PreconditionFailed'
        428:
          $ref: '#/components/responses/428PreconditionRequired'
        500:
          $ref: '#/components/responses/500InternalServerError'

  '/clients/{uid}/medications/{id}/stop':
    parameters:
    - in: path
      name: uid
      description: Client User ID
      required: true
      schema:
        type: integer
        minimum: 0
    - in: path
      name: id
      description: Medication record ID
      required: true
      schema:
        type: integer
    post:
      tags:
        - Client Medications
      security:
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Move a medication to past medications
      description: Returns the medication record in response upon success.
      parameters:
        - $ref: '#/components/parameters/etag'
        - $ref: '#/components/parameters/view'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/medicationRecord'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        412:
          $ref: '#/components/responses/412PreconditionFailed'
        428:
          $ref: '#/components/responses/428PreconditionRequired'
        500:
          $ref: '#/components/responses/500InternalServerError'

  '/clients/{uid}/illnesses':
    parameters:
    - in: path
      name: uid
      description: Client User ID
      required: true
      schema:
        type: integer
        minimum: 0
    get:
      tags:
        - Client Illnesses
      security:
        - ClientAccess: []
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Get the list of a given clients illnesses
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/illnessRecord'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        500:
          $ref: '#/components/responses/500InternalServerError'
    post:
      tags:
        - Client Illnesses
      security:
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Create a new illness record
      description: Returns the full list of illness records in response upon success. The chronic flag cannot be set to true and have the cured date set. Cured date is nullable
      parameters:
        - $ref: '#/components/parameters/etag'
        - $ref: '#/components/parameters/view'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/illnessRecordCreate'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/illnessRecord'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        412:
          $ref: '#/components/responses/412PreconditionFailed'
        428:
          $ref: '#/components/responses/428PreconditionRequired'
        500:
          $ref: '#/components/responses/500InternalServerError'

  '/clients/{uid}/illnesses/{id}':
    parameters:
    - in: path
      name: uid
      description: Client User ID
      required: true
      schema:
        type: integer
        minimum: 0
    - in: path
      name: id
      description: Medication record ID
      required: true
      schema:
        type: integer
    patch:
      tags:
        - Client Illnesses
      security:
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Update an illness record
      description: Only those properties included in the request body will be changed. An illness cannot have it's curedDate set if the chronic flag is currently true.
      parameters:
        - $ref: '#/components/parameters/etag'
        - $ref: '#/components/parameters/view'
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/illnessRecordModify'
      responses:
        201:
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/illnessRecord'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        412:
          $ref: '#/components/responses/412PreconditionFailed'
        428:
          $ref: '#/components/responses/428PreconditionRequired'
        500:
          $ref: '#/components/responses/500InternalServerError'

    delete:
      tags:
        - Client Illnesses
      security:
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Delete an illness
      description: Returns the illness record after success
      parameters:
        - $ref: '#/components/parameters/etag'
        - $ref: '#/components/parameters/view'
      responses:
        201:
          description: Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/illnessRecord'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        412:
          $ref: '#/components/responses/412PreconditionFailed'
        428:
          $ref: '#/components/responses/428PreconditionRequired'
        500:
          $ref: '#/components/responses/500InternalServerError'


  '/clients/{uid}/procedures':
    parameters:
    - in: path
      name: uid
      description: Client User ID
      required: true
      schema:
        type: integer
        minimum: 0
    get:
      tags:
        - Client Procedures
      security:
        - ClientAccess: []
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Get the list of a given clients medical procedures
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/procedureRecord'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        500:
          $ref: '#/components/responses/500InternalServerError'
    post:
      tags:
        - Client Procedures
      security:
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Create a new procedure record
      description: Returns the full list of procedure records in response upon success.
      parameters:
        - $ref: '#/components/parameters/etag'
        - $ref: '#/components/parameters/view'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/procedureRecordCreate'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/procedureRecord'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        412:
          $ref: '#/components/responses/412PreconditionFailed'
        428:
          $ref: '#/components/responses/428PreconditionRequired'
        500:
          $ref: '#/components/responses/500InternalServerError'

  '/clients/{uid}/procedures/{id}':
    parameters:
    - in: path
      name: uid
      description: Client User ID
      required: true
      schema:
        type: integer
        minimum: 0
    - in: path
      name: id
      description: Procedure record ID
      required: true
      schema:
        type: integer
    patch:
      tags:
        - Client Procedures
      security:
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Update a procedure record
      description: Only those properties included in the request body will be changed.
      parameters:
        - $ref: '#/components/parameters/etag'
        - $ref: '#/components/parameters/view'
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/procedureRecordCreate'
      responses:
        201:
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/procedureRecord'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        412:
          $ref: '#/components/responses/412PreconditionFailed'
        428:
          $ref: '#/components/responses/428PreconditionRequired'
        500:
          $ref: '#/components/responses/500InternalServerError'
    delete:
      tags:
        - Client Procedures
      security:
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Delete a procedure record
      parameters:
        - $ref: '#/components/parameters/etag'
        - $ref: '#/components/parameters/view'
      responses:
        201:
          description: Deleted
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        412:
          $ref: '#/components/responses/412PreconditionFailed'
        428:
          $ref: '#/components/responses/428PreconditionRequired'
        500:
          $ref: '#/components/responses/500InternalServerError'


  '/clients/transplantRequests':
    get:
      tags:
        - Client Transplant Requests
      security:
        - ClientAccess: []
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Returns a list of transplant requests
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/region'
        - name: organs
          in: query
          description: "Only return transplants involving the given organs, may be comma seperated for multiple"
          schema:
            $ref: '#/components/schemas/organEnum'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/transplantRequest'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        500:
          $ref: '#/components/responses/500InternalServerError'


  '/clients/{uid}/transplantRequests':
    parameters:
    - in: path
      name: uid
      description: Client User ID
      required: true
      schema:
        type: integer
        minimum: 0
    get:
      tags:
        - Client Transplant Requests
      security:
        - ClientAccess: []
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Get the list of a given clients transplant requests
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/transplantRequest'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        500:
          $ref: '#/components/responses/500InternalServerError'
    post:
      tags:
        - Client Transplant Requests
      security:
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Create a new transplant request
      description: Returns the full list of transplant requests in response upon success.
      parameters:
        - $ref: '#/components/parameters/etag'
        - $ref: '#/components/parameters/view'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/transplantRequestCreate'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/transplantRequest'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        412:
          $ref: '#/components/responses/412PreconditionFailed'
        428:
          $ref: '#/components/responses/428PreconditionRequired'
        500:
          $ref: '#/components/responses/500InternalServerError'

  '/clients/{uid}/transplantRequests/{id}':
    parameters:
    - in: path
      name: uid
      description: Client User ID
      required: true
      schema:
        type: integer
        minimum: 0
    - in: path
      name: id
      description: Transplant Request ID
      required: true
      schema:
        type: integer
    patch:
      tags:
        - Client Transplant Requests
      security:
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Update a transpant request
      description: Only those properties included in the request body will be changed.
      parameters:
        - $ref: '#/components/parameters/etag'
        - $ref: '#/components/parameters/view'
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/transplantRequestCreate'
      responses:
        201:
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transplantRequest'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        412:
          $ref: '#/components/responses/412PreconditionFailed'
        428:
          $ref: '#/components/responses/428PreconditionRequired'
        500:
          $ref: '#/components/responses/500InternalServerError'
    delete:
      tags:
        - Client Transplant Requests
      security:
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Delete a transpant request
      parameters:
        - $ref: '#/components/parameters/etag'
        - $ref: '#/components/parameters/view'
      responses:
        201:
          description: Deleted
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        412:
          $ref: '#/components/responses/412PreconditionFailed'
        428:
          $ref: '#/components/responses/428PreconditionRequired'
        500:
          $ref: '#/components/responses/500InternalServerError'







  ### Clinician
  /clinicians:
    get:
      tags:
        - Clinician
      security:
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: "Returns all clinicians from the system"
      parameters:
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/count'
        - $ref: '#/components/parameters/region'
      responses:
        200:
          description: A list of clinicians
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/clinicianOverview'

        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        500:
          $ref: '#/components/responses/500InternalServerError'
    post:
      tags:
        - Clinician
      security:
        - AdministratorAccess: []
      summary: Create a new clinician
      parameters:
        - $ref: '#/components/parameters/view'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clinicianModifiableDetails'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clinicianDetails'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        500:
          $ref: '#/components/responses/500InternalServerError'
  '/clinicians/{staffId}':
    parameters:
    - in: path
      name: staffId
      description: Clinician Staff ID
      required: true
      schema:
        type: integer
        minimum: 0
    get:
      tags:
        - Clinician
      security:
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Get detailed clinician information
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clinicianDetails'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        500:
          $ref: '#/components/responses/500InternalServerError'
    patch:
      tags:
        - Clinician
      security:
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Change some information about a clinician
      description: Only those properties included in the request body will be changed.
      parameters:
        - $ref: '#/components/parameters/etag'
        - $ref: '#/components/parameters/view'
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/clinicianModifiableDetails'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clinicianDetails'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        412:
          $ref: '#/components/responses/412PreconditionFailed'
        428:
          $ref: '#/components/responses/428PreconditionRequired'
        500:
          $ref: '#/components/responses/500InternalServerError'
    delete:
      tags:
        - Clinician
      security:
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Delete a clinician
      parameters:
        - $ref: '#/components/parameters/etag'
        - $ref: '#/components/parameters/view'
      responses:
        201:
          description: Deleted
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        412:
          $ref: '#/components/responses/412PreconditionFailed'
        428:
          $ref: '#/components/responses/428PreconditionRequired'
        500:
          $ref: '#/components/responses/500InternalServerError'




  ### Administrator
  /administrators:
    get:
      tags:
        - Administrator
      security:
        - AdministratorAccess: []
      summary: Returns all administrators from the system
      parameters:
        - $ref: '#/components/parameters/q'
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/count'
      responses:
        200:
          description: A list of administrators
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/administratorDetails'

        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        500:
          $ref: '#/components/responses/500InternalServerError'
    post:
      tags:
        - Administrator
      security:
        - AdministratorAccess: []
      summary: Create a new administrator
      parameters:
        - $ref: '#/components/parameters/view'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/administratorCreateDetails'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/administratorDetails'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        500:
          $ref: '#/components/responses/500InternalServerError'
  '/administrators/{username}':
    parameters:
    - in: path
      name: username
      description: Administrator ID
      required: true
      schema:
        type: integer
        minimum: 0
    get:
      tags:
        - Administrator
      security:
        - AdministratorAccess: []
      summary: Get detailed administrator information
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/administratorDetails'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        500:
          $ref: '#/components/responses/500InternalServerError'
    patch:
      tags:
        - Administrator
      security:
        - AdministratorAccess: []
      summary: Change some information about an administrator
      description: Only those properties included in the request body will be changed.
      parameters:
        - $ref: '#/components/parameters/etag'
        - $ref: '#/components/parameters/view'
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/administratorModifiableDetails'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/administratorDetails'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        412:
          $ref: '#/components/responses/412PreconditionFailed'
        428:
          $ref: '#/components/responses/428PreconditionRequired'
        500:
          $ref: '#/components/responses/500InternalServerError'
    delete:
      tags:
        - Administrator
      security:
        - AdministratorAccess: []
      summary: Delete an administrator
      parameters:
        - $ref: '#/components/parameters/etag'
        - $ref: '#/components/parameters/view'
      responses:
        201:
          description: Deleted
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        404:
          $ref: '#/components/responses/404NotFound'
        412:
          $ref: '#/components/responses/412PreconditionFailed'
        428:
          $ref: '#/components/responses/428PreconditionRequired'
        500:
          $ref: '#/components/responses/500InternalServerError'

  '/sql':
    post:
      tags:
        - Administrator
      security:
        - AdministratorAccess: []
      summary: Execute abritrary SQL on the backend database. Currently only supports read actions
      requestBody:
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/sql'
      responses:
        200:
          description: The response from the SQL query
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        500:
          $ref: '#/components/responses/500InternalServerError'


  '/login/client':
    post:
      tags:
        - Authentication
      summary: Client login endpoint
      description: Returns the unique identifier used for future queries, and also an optional userData if the view paramater is set to details
        The response will also include the authentication token, which should be included in the Authentication header for all future requests.
      parameters:
        - $ref: '#/components/parameters/view'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clientLoginBody'
      responses:
        200:
          description: Successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientLoginResponse'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          description: Invalid username or password
        500:
          $ref: '#/components/responses/500InternalServerError'

  '/login/clinician':
    post:
      tags:
        - Authentication
      summary: Clinician login endpoint
      description: Returns the authentication token, which should be included in the Authentication header for all future requests.
                Also an optional userData if the view paramater is set to full.
      parameters:
        - $ref: '#/components/parameters/view'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/clinicianLoginBody'
      responses:
        200:
          description: Successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clinicianLoginResponse'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          description: Invalid username or password
        500:
          $ref: '#/components/responses/500InternalServerError'

  '/login/administrator':
    post:
      tags:
        - Authentication
      summary: Administrator login endpoint
      description: Returns the authentication token, which should be included in the Authentication header for all future requests.
        Also an optional userData if the view paramater is set to full.
      parameters:
        - $ref: '#/components/parameters/view'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/administratorLoginBody'
      responses:
        200:
          description: Successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/administratorLoginResponse'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          description: Invalid username or password
        500:
          $ref: '#/components/responses/500InternalServerError'


  '/actions/undo':
    get:
      tags:
        - Actions
      security:
        - ClientAccess: []
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Get the next action to be undone. May be null if no more actions to undo
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/textResponse'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        500:
          $ref: '#/components/responses/500InternalServerError'
    post:
      tags:
        - Actions
      security:
        - ClientAccess: []
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Undo the last executed action
      description: Returns the string text of the undo action. Requires an etag of the object being modified
      parameters:
        - $ref: '#/components/parameters/etag'
      responses:
        201:
          description: Undone
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/textResponse'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        412:
          $ref: '#/components/responses/412PreconditionFailed'
        428:
          $ref: '#/components/responses/428PreconditionRequired'
        500:
          $ref: '#/components/responses/500InternalServerError'


  '/actions/redo':
    get:
      tags:
        - Actions
      security:
        - ClientAccess: []
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Get the next action to be redone. May be null if no more actions to redo
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/textResponse'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        500:
          $ref: '#/components/responses/500InternalServerError'
    post:
      tags:
        - Actions
      security:
        - ClientAccess: []
        - ClinicianAccess: []
        - AdministratorAccess: []
      summary: Redo the last undone action
      description: Returns the string text of the redo action. Requires an etag of the object being modified
      parameters:
        - $ref: '#/components/parameters/etag'
      responses:
        201:
          description: Redone
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/textResponse'
        400:
          $ref: '#/components/responses/400BadRequest'
        401:
          $ref: '#/components/responses/401Unauthorized'
        403:
          $ref: '#/components/responses/403Forbidden'
        412:
          $ref: '#/components/responses/412PreconditionFailed'
        428:
          $ref: '#/components/responses/428PreconditionRequired'
        500:
          $ref: '#/components/responses/500InternalServerError'

components:
  parameters:
    q:
      name: q
      in: query
      description: "The search string"
      schema:
        type: string

    offset:
      name: offset
      in: query
      description: "The offset from the start of the result set, used for pagination"
      schema:
        type: integer

    count:
      name: count
      in: query
      description: "How many results to return, used for pagination"
      schema:
        type: integer

    minimumAge:
      name: minimumAge
      in: query
      description: "The minimum age to filter"
      schema:
        type: integer

    maximumAge:
      name: maximumAge
      in: query
      description: "The maximum age to filter"
      schema:
        type: integer

    region:
      name: region
      in: query
      description: "The region to filter, may be comma seperated for multiple"
      schema:
        $ref: '#/components/schemas/regionEnum'

    birthGender:
      name: birthGender
      in: query
      description: "The birth gender to filter, may be comma seperated for multiple"
      schema:
        $ref: '#/components/schemas/genderEnum'

    clientType:
      name: clientType
      in: query
      description: "The client type to filter"
      schema:
        $ref: '#/components/schemas/clientTypeEnum'

    donating:
      name: donating
      in: query
      description: "Only return clients that are donating the given organs, may be comma seperated for multiple"
      schema:
        $ref: '#/components/schemas/organEnum'

    requesting:
      name: requesting
      in: query
      description: "Only return clients that are requesting the given organs, may be comma seperated for multiple"
      schema:
        $ref: '#/components/schemas/organEnum'

    view:
      name: view
      in: query
      description: "Return either a minimal or full representation of the new object in response. Should either be minimal or full. Defaults to full"
      schema:
        type: string

    etag:
      name: etag
      in: header
      description: A hashed value of the object used for optimistic concurrency control
      required: true
      schema:
        $ref: '#/components/schemas/etag'


  examples:
    clientDetailsExample:
      value:
        {
          "uid": 0,
          "firstName": "Joeseph",
          "middleName": "Freddy",
          "lastName": "Bloggs",
          "preferredName": "Jolene",
          "currentAddress": "123 Fake St",
          "height": 177,
          "weight": 74,
          "bloodType": "A_NEG",
          "region": "CANTERBURY",
          "birthGender": "MALE",
          "genderIdentity": "FEMALE",
          "dateOfBirth": {
            "year": 1987,
            "month": 04,
            "day": 01
          },
          "dateOfDeath": null,
          "createdTimestamp": {
            "date": {
              "year": 2018,
              "month": 06,
              "day": 25
            },
            "time": {
              "hour": 01,
              "minute": 02,
              "second": 03,
              "nano": 123456
            }
          },
          "modifiedTimestamp": {
            "date": {
              "year": 2018,
              "month": 06,
              "day": 26
            },
            "time": {
              "hour": 04,
              "minute": 05,
              "second": 06,
              "nano": 123456
            }
          }
        }

  schemas:

    clientLoginBody:
      type: object
      properties:
        userid:
          type: integer

    clientLoginResponse:
      type: object
      properties:
        token:
          $ref: '#/components/schemas/jsonWebToken'
        identifier:
          type: integer
        userData:
          $ref: '#/components/schemas/clientDetails'

    clinicianLoginBody:
      type: object
      properties:
        staffId:
          type: integer
        password:
          type: string

    clinicianLoginResponse:
      type: object
      properties:
        token:
          $ref: '#/components/schemas/jsonWebToken'
        userData:
          $ref: '#/components/schemas/clinicianDetails'

    administratorLoginBody:
      type: object
      properties:
        username:
          type: string
        password:
          type: string

    administratorLoginResponse:
      type: object
      properties:
        token:
          $ref: '#/components/schemas/jsonWebToken'
        userData:
          $ref: '#/components/schemas/administratorDetails'

    jsonWebToken:
      type: string
      description: A JSON Web Token used for all further authentication. Should be included in the Authentication header
      example: eyJhbGR5cCI6IkpXVCJ9.eyJzdWIiDIyfQ.Vxrhpalxry4EfsAKGITz02x0


    ### Clinician

    clinicianOverview:
      type: object
      properties:
        staffId:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        region:
          $ref: '#/components/schemas/regionEnum'

    clinicianDetails:
      type: object
      properties:
        staffId:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        workAddress:
          type: string
        region:
          $ref: '#/components/schemas/regionEnum'
        createdOn:
          $ref: '#/components/schemas/dateTime'
        modifiedOn:
          $ref: '#/components/schemas/dateTime'

    clinicianModifiableDetails:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        workAddress:
          type: string
        region:
          $ref: '#/components/schemas/regionEnum'


    ### Administrator
    administratorDetails:
      type: object
      properties:
        username:
          type: string
        createdOn:
          $ref: '#/components/schemas/dateTime'
        modifiedOn:
          $ref: '#/components/schemas/dateTime'

    administratorCreateDetails:
      type: object
      properties:
        username:
          type: string
        password:
          type: string

    administratorModifiableDetails:
      type: object
      properties:
        username:
          type: string



    #Client attributes

    clientOverview:
      type: object
      properties:
        uid:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        preferredName:
          type: string
        dateOfBirth:
            $ref: '#/components/schemas/date'

    clientDetails:
      type: object
      properties:
        uid:
          type: integer
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        preferredName:
          type: string
        currentAddress:
          type: string
        height:
          type: number
        weight:
          type: number
        bloodType:
          $ref: '#/components/schemas/bloodTypeEnum'
        region:
          $ref: '#/components/schemas/regionEnum'
        birthGender:
          $ref: '#/components/schemas/genderEnum'
        genderIdentity:
          $ref: '#/components/schemas/genderEnum'
        dateOfBirth:
          $ref: '#/components/schemas/date'
        dateOfDeath:
          $ref: '#/components/schemas/date'
        createdTimestamp:
          $ref: '#/components/schemas/dateTime'
        modifiedTimestamp:
          $ref: '#/components/schemas/dateTime'
      example:
        $ref: '#/components/examples/clientDetailsExample'

    clientModifiableDetails:
      type: object
      properties:
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        preferredName:
          type: string
        currentAddress:
          type: string
        height:
          type: number
        weight:
          type: number
        region:
          $ref: '#/components/schemas/regionEnum'
        birthGender:
          $ref: '#/components/schemas/genderEnum'
        genderIdentity:
          $ref: '#/components/schemas/genderEnum'
        dateOfBirth:
          $ref: '#/components/schemas/date'
        dateOfDeath:
          $ref: '#/components/schemas/date'

    date:
      type: string
      nullable: true
    time:
      type: string
    dateTime:
      type: string


    organBooleanArray:
      type: object
      properties:
        LIVER:
          type: boolean
        KIDNEY:
          type: boolean
        PANCREAS:
          type: boolean
        HEART:
          type: boolean
        LUNG:
          type: boolean
        INTESTINE:
          type: boolean
        CORNEA:
          type: boolean
        MIDDLE_EAR:
          type: boolean
        SKIN:
          type: boolean
        BONE:
          type: boolean
        BONE_MARROW:
          type: boolean
        CONNECTIVE_TISSUE:
          type: boolean

    medicationRecord:
      type: object
      properties:
        id:
          type: number
        medicationName:
          type: string
        started:
          $ref: '#/components/schemas/date'
        stopped:
          $ref: '#/components/schemas/date'

    medicationRecordCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Paracetamol

    illnessRecord:
      type: object
      properties:
        id:
          type: number
        illnessName:
          type: string
        diagnosisDate:
          $ref: '#/components/schemas/date'
        curedDate:
          $ref: '#/components/schemas/date'
        isChronic:
          type: boolean

    illnessRecordCreate:
      type: object
      properties:
        name:
          type: string
        diagnosisDate:
          $ref: '#/components/schemas/date'
        curedDate:
          $ref: '#/components/schemas/date'
        isChronic:
          type: boolean

    illnessRecordModify:
      type: object
      properties:
        diagnosisDate:
          $ref: '#/components/schemas/date'
        curedDate:
          $ref: '#/components/schemas/date'
        isChronic:
          type: boolean


    procedureRecord:
      type: object
      properties:
        id:
          type: number
        summary:
          type: string
        description:
          type: string
        date:
          $ref: '#/components/schemas/date'
        affectedOrgans:
          type: array
          items:
            $ref: '#/components/schemas/organEnum'

    procedureRecordCreate:
      type: object
      properties:
        summary:
          type: string
        description:
          type: string
        date:
          $ref: '#/components/schemas/date'
        affectedOrgans:
          type: array
          items:
            $ref: '#/components/schemas/organEnum'

    transplantRequest:
      type: object
      properties:
        id:
          type: number
        requestedOrgan:
          $ref: '#/components/schemas/organEnum'
        requestDate:
          $ref: '#/components/schemas/date'
        resolvedDate:
          $ref: '#/components/schemas/date'
        status:
          $ref: '#/components/schemas/transplantRequestStatusEnum'
        resolvedReason:
          type: string

    transplantRequestCreate:
      type: object
      properties:
        requestedOrgan:
          $ref: '#/components/schemas/organEnum'
        requestDate:
          $ref: '#/components/schemas/date'
        resolvedDate:
          $ref: '#/components/schemas/date'
        status:
          $ref: '#/components/schemas/transplantRequestStatusEnum'
        resolvedReason:
          type: string
          nullable: true

    historyItem:
      type: object
      properties:
        type:
          type: string
        details:
          type: string
        timestamp:
          $ref: '#/components/schemas/dateTime'

    textResponse:
      type: object
      properties:
        response:
          type: string
        
        
        
    #ENUMs
    
    regionEnum:
      type: string
      enum: [NORTHLAND, AUCKLAND, WAIKATO, BAY_OF_PLENTY, GISBORNE, HAWKES_BAY, TARANAKI, MANAWATU_WANGANUI, WELLINGTON, TASMAN, NELSON, MARLBOROUGH, WEST_COAST, CANTERBURY, OTAGO, SOUTHLAND, UNSPECIFIED]
      
    genderEnum:
      type: string
      enum: [MALE, FEMALE, OTHER, UNSPECIFIED]
      
    clientTypeEnum:
      type: string
      enum: [any, onlyDonor, onlyReceiver, both, neither]
      
    organEnum:
      type: string
      enum: [LIVER, KIDNEY, PANCREAS, HEART, LUNG, INTESTINE, CORNEA, MIDDLE_EAR, SKIN, BONE, BONE_MARROW, CONNECTIVE_TISSUE]
      
    bloodTypeEnum:
      type: string
      enum: [A_POS, A_NEG, B_POS, B_NEG, AB_POS, AB_NEG, O_POS, O_NEG]
      
    transplantRequestStatusEnum:
      type: string
      enum: [WAITING, CANCELLED, COMPLETED]


    sql:
      type: object
      properties:
        query:
          type: string
          example: SELECT * FROM Client
          
    
    etag:
      type: string
      description: A hashed value of the object used for optimistic concurrency control
      
      
      
  responses:
    400BadRequest:
      description: Bad request
    401Unauthorized:
      description: Access token is missing or invalid
    403Forbidden:
      description: You do not have permission to perform that action
    404NotFound:
      description: The specified resource was not found
    412PreconditionFailed:
      description: That resource has already been modified or the ETag header is invalid
    428PreconditionRequired:
      description: ETag header was missing and is required to modify a resource
    500InternalServerError:
      description: Internal server error
    
      
  securitySchemes:
          
    ClientAccess:
      description: A client may only access their own data, they cannot access other users. They may only modify their personal information and organ donation status. They can view all their other statuses.
      type: http
      scheme: bearer
      bearerFormat: JWT
      
    ClinicianAccess:
      description: Clincians can access and modify and client, and may view any clinician, but only modify their own information.
      type: http
      scheme: bearer
      bearerFormat: JWT
      
    AdministratorAccess:
      description: Administrators can access and modify all user types.
      type: http
      scheme: bearer
      bearerFormat: JWT